#!/bin/bash

# A menu driven shell script sample template 

## ----------------------------------

# Step #1: Define variables

# ----------------------------------

#https://bash.cyberciti.biz

EDITOR=vim



RED='\033[0;41;30m'

STD='\033[0;0;39m'

 

# ----------------------------------

# Step #2: User defined function

# ----------------------------------

# grep -zP "(?s)def .*?\n[^\s]" sets.py --color=always





pause(){



read -p "Press [Enter] key to continue..." fackEnterKey

}

data_file(){

	ls

	echo "Input Filename"

        read filename

	cat  $filename  > data

	echo $filename > filename

	mkdir data_files

}



# do something in two()

w_get(){

	echo "wget url, Please paste url then filename to be saved to"

        read url html

	wget -O $html  $url 

	filename=$html

	cat $html > data

	echo $filename > filename

	pause

}





grep_forward(){

        echo "type in keywords or patters to search for"





	pattern =""



	while [ "$pattern" != "Q" ]

	echo "type in words or patterns to filter content"

	echo "Q to quit"

	echo "result will be saved in data"

	do

	cat data

	read pattern

	if [ "$pattern" == "Q" ];then

	break

	fi



	clear

	cat data | grep -oP "$pattern.*"  > /tmp/data

	cat /tmp/data > data

	#read pattern

	done





}



grep_backwards(){

        echo "type in keywords or patters to search for"

        cat $(cat filename)>data



        pattern =""



        while [ "$pattern" != "Q" ]

        echo "type in words or patterns to filter content"

        echo "Q to quit"

        echo "result will be saved in data"

        do

        cat data

        read pattern

        if [ "$pattern" == "Q" ];then

        break

        fi



        clear

        cat data | grep -oP ".*$pattern"  > /tmp/data

        cat /tmp/data > data

        #read pattern

        done

}









browse(){

	cat data|fzf -m --bind ctrl-a:select-all,ctrl-d:deselect-all,ctrl-t:toggle-all --print-query >/tmp/data

	cat /tmp/data > data

	sed -n '1p' data >> queries

	sed -e '1d' data

}





six(){



	 cat $(cat  filename) > data



}



seven(){



i="True"

echo "Q to quit"

delete_patters=""

while [ "$i" != "Q" ]

do

cat data

echo "input pattern or word to remove"

read i



delete_patterns+="$i|"

echo $delete_patters

sed -re 's/"'${delete_patterns::-1}'"//g' data > /tmp/data

cat /tmp/data > data

cat data

done





}

eight(){

cat data | fzf --query "'.edu" | "'.com"

}



queries(){

cat data | fzf --query "$(tail -n 1000  queries |fzf)" -m --bind ctrl-a:select-all,ctrl-d:deselect-all,ctrl-t:toggle-all --print-query > /tmp/data

cat /tmp/data > data

}



save(){

echo "Input File name"

read fname

cat data > $fname

}





loop(){

echo "pass the filename to be looped over and the function to apply to the data"

echo "such as loop_file_1 echo"

read fname

read fnctn

for line in $(cat $fname );do $fnctn $line;done

pause

}





vocab(){

cat data | sed -re 's/\./\n/g'|sed -re 's/^\s//g'|sed -re 's/\s/\n/g'|grep -ivwf stop_words|sed -re 's/\,|:|\(|\)|\[|\]|\"|\?//g'|grep -v "[0-9]"|sed -n '/.\{5\}/p'|sed -re "s/^'|\-\-$|;//g"|sort|uniq -c |sort -n| tee vocab

cat vocab|grep -E "[A-Z].*" > vocab_caps

grep -vf vocab_caps vocab >/tmp/vocab

cat /tmp/vocab > lc_vocab

paste lc_vocab vocab_caps| expand -t 13|more

pause

echo "an upper case filter has been saved to vocab_caps"

}





md5_revised(){

#only works for local directory, but has the correct naming convention.

time find . -type f |xargs -P 0 md5sum|tee $(pwd|rev|cut -d"/" -f1|rev)"_md5s_"$(date|sed -re 's/\s+/_/g')

}





EDIT_MENU(){

vim menu.sh

}

repo_count_div_30(){
        echo $(($(cat /tmp/repos |tr ',' '\n'|grep clone_url|wc -l ) % 30))
}


g_hub_repos(){
if [[ ! -f /tmp/page_number ]];
then
        echo 1 > /tmp/page_number
fi


if [[ ! -f /tmp/username ]];
	then
	echo "input username"
        read username
        echo $username > /tmp/username
	echo $username
fi

page_number="$(cat /tmp/page_number|head -n 1|tr -d ' ')"
echo $page_number
username="$(cat /tmp/username|head -n 1|tr -d ' ')"
echo $username
w3m https://api.github.com/users/$username/repos?page=$page_number >> /tmp/repos
less /tmp/repos  | sed -re 's/\,/\n/g'|grep clone_url|cut -d":" -f2-|tr -d '"'|sort | uniq >> data
cat data|sort|uniq > repos
get_next_page="$(repo_count_div_30)"
if [[ $get_next_page -eq 0 ]];
then
        echo "$(( $(cat /tmp/page_number |head -n 1|tr -d ' ') + 1))" > /tmp/page_number
        g_hub_repos
fi
}



g_clone(){
for line in $(cat data);do git clone "$line".git ;done
pause
}



ram_disk(){

echo "How much ram do you want to allocate to your ramdisk in MB?"

free -h|grep available -A 1 --color=always 

read ram_mbs

sudo mkdir /mnt/ramdisk

sudo mount -t tmpfs -o size="$ram_mbs"m tmpfs /mnt/ramdisk

df -h | grep ramdisk --color=always

pause

}





Install(){

echo "installing w3m git redis vim fzf"

echo ""
sudo apt-get install w3m git redis vim;

git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf

~/.fzf/install

source ~/.bashrc

}



# function to display menus

show_menus() {

	clear

        cat test

	echo ""

	echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"	

	echo "						 M A I N - M E N U"

	echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"

echo ""

echo ""

echo ""
echo " S.  Set Data File Name                      B.   Browse Data                   M.  MD5 Checksum on Directory"
echo "                                                                       "
echo "SD. Set Working Directory                   GF.   Grep Forward                 W.  Wget Urls "
echo "                                                                   "
echo "                                            GB.   Grep Backward                 W.  W3m  Urls"
echo ""
echo " R. reset file back to original             SR.   Sed Replace                  FF.  Firefox Urls"
echo "                              "
echo "SF. save file                                                                   G.  list Public Github Repos                    "
echo " "
echo "                                                                                GC.  Git clone selected Repos"
echo ""
echo " I. Install Application Dependencies "
echo ""
echo "RD. Create Ram Disk"
echo ""
echo ""
}

# read input from the keyboard and take a action

# invoke the one() when the user select 1 from the menu option.

# invoke the two() when the user select 2 from the menu option.

# Exit when user the user select 3 form the menu option.

read_options(){

	local choice

	read -p "Enter choice [ 1 - 10] " choice

	case $choice in

		S|s) data_file ;;

		WG|wg) w_get ;;

		B|b) browse;;

		4) queries ;;

		5) grep_forward ;;

		6) six  ;;

		SF|sf) save;;

		RD|rd) ram_disk ;;

		9) loop;;

		M|m) md5_revised ;;

		E|e) EDIT_MENU ;;

		G|g) g_hub_repos ;;

		GC|gc) g_clone ;; 

		V|v) vocab ;;

		U|u) urls ;;


		I|i) Install ;;



		0) exit 0;;

		*) echo -e "${RED}Error...${STD}" && sleep 2

esac

}



# -----------------------------------

# Step #4: Main logic - infinite loop

# ------------------------------------

while true

do

 

	show_menus

	read_options

done



